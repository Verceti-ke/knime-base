<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>
<plugin>
   <extension-point id="pmmlports" name="pmml.ports" schema="schema/pmmlports.exsd"/>
    <extension
         point="org.knime.workbench.repository.categories">
      <category
            icon="icons/16x16/category_reader.png"
            level-id="io"
            name="IO"
            path="/"/>
      <category
            icon="icons/16x16/read.png"
            level-id="read"
            name="Read"
            path="/io"/>
      <category
            after="read"
            icon="icons/16x16/write.png"
            level-id="write"
            name="Write"
            path="/io"/>
      <category
            after="io"
            icon="icons/16x16/category_database.png"
            level-id="database"
            name="Database"
            path="/"/>
      <category
            after="database"
            icon="icons/16x16/category_transform.gif"
            level-id="manipulation"
            name="Data Manipulation"
            path="/"/>
      <category
            icon="icons/16x16/column.png"
            level-id="column"
            name="Column"
            path="/manipulation"/>
      <category
            after="column"
            icon="icons/16x16/row.png"
            level-id="row"
            name="Row"
            path="/manipulation"/>
      <category
            after="statistics"
            icon="icons/16x16/category_learner.gif"
            level-id="mining"
            name="Mining"
            path="/"/>
      <category
            icon="icons/missing.gif"
            level-id="basisfunction"
            name="Fuzzy Rules"
            path="/mining/rules"/>
      <category
            icon="icons/missing.gif"
            level-id="clustering"
            name="Clustering"
            path="/mining"/>
      <category
            after="manipulation"
            icon="icons/16x16/category_visualize.gif"
            level-id="view"
            name="Data Views"
            path="/"/>
      <category
            level-id="property"
            icon="icons/16x16/category_properties.gif"
            description="View Properties"
            path="/view"
            name="Property"/>
      <category
            level-id="nn"
            icon="icons/missing.gif"
            description="Learning of Neural Networks"
            path="/mining"
            after="rules"
            name="Neural Network"/>
      <category
            after="view"
            icon="icons/16x16/category_statistics.png"
            level-id="statistics"
            name="Statistics"
            path="/"/>
       <category
            icon="icons/missing.gif"
            level-id="regression"
            name="Regression"
            path="/statistics"/>
      <category
            after="clustering"
            icon="icons/missing.gif"
            level-id="rules"
            name="Rule Induction"
            path="/mining"/>
      <category
            icon="icons/missing.gif"
            level-id="mlp"
            name="MLP"
            path="/mining/nn"/>
      <category
            after="mlp"
            icon="icons/missing.gif"
            level-id="pnn"
            name="PNN"
            path="/mining/nn"/>
      <category
            after="nn"
            icon="icons/missing.gif"
            level-id="dtree"
            name="Decision Tree"
            path="/mining"/>
      <category
            icon="icons/missing.gif"
            level-id="modeleval"
            name="Scoring"
            path="/mining"/>
      <category
            after="write"
            icon="icons/missing.gif"
            level-id="artificial"
            name="Artificial Data"
            path="/io"/>
      <category
            icon="icons/missing.gif"
            level-id="subgroup"
            name="Association Rules"
            path="/mining"/>
      <category
            after="row"
            icon="icons/16x16/matrix.png"
            level-id="matrix"
            name="Matrix"
            path="/manipulation"/>
      <category
            description="meta nodes"
            icon="icons/16x16/meta.png"
            level-id="meta"
            name="Meta"
            path="/"/>
      <category
            after="dtree"
            description="miscellaneous classifiers"
            icon="icons/missing.gif"
            level-id="miscClass"
            name="Misc Classifiers"
            path="/mining"/>
      <category
            icon="icons/missing.gif"
            level-id="bayes"
            name="Bayes"
            path="/mining"/>
      <category
            icon="icons/missing.gif"
            level-id="mds"
            name="MDS"
            path="/mining"/>
      <category
            icon="icons/missing.gif"
            level-id="svm"
            name="SVM"
            path="/mining">
      </category>
      <category
            after="crossvalidation"
            icon="icons/16x16/category_feature_elimination.png"
            level-id="features"
            name="Feature Selection"
            path="/loopsupport">
      </category>
      <category
            description="nodes for manual assembly of loops"
            icon="icons/16x16/category_loop_support.png"
            level-id="loopsupport"
            name="Loop Support"
            path="/">
      </category>
      <category
            description="Nodes necessary for cross validation"
            icon="icons/16x16/category_cross_validation.png"
            level-id="crossvalidation"
            name="Cross Validation"
            path="/loopsupport">
      </category>
      <category
            after="meta"
            description="miscellaneous nodes"
            icon="icons/missing.gif"
            level-id="misc"
            name="Misc"
            path="/"/>
      <category
            icon="icons/missing.gif"
            level-id="column-split+combine"
            name="Split &amp; Combine"
            path="/manipulation/column">
      </category>
      <category
            icon="icons/missing.gif"
            level-id="column-filter"
            name="Filter"
            path="/manipulation/column">
      </category>
      <category
            icon="icons/missing.gif"
            level-id="column-transform"
            name="Transform"
            path="/manipulation/column">
      </category>
      <category
            icon="icons/missing.gif"
            level-id="binning"
            name="Binning"
            path="/manipulation/column">
      </category>
      <category
            icon="icons/missing.gif"
            level-id="column-convert+replace"
            name="Convert &amp; Replace"
            path="/manipulation/column">
      </category>
      <category
            icon="icons/missing.gif"
            level-id="row-filter"
            name="Filter"
            path="/manipulation/row">
      </category>
      <category
            icon="icons/missing.gif"
            level-id="row-transform"
            name="Transform"
            path="/manipulation/row">
      </category>
      <category
            icon="icons/missing.gif"
            level-id="pca"
            name="PCA"
            path="/mining">
      </category>      
   </extension>
            
     <extension
         point="org.knime.workbench.repository.nodes">
      <node
            factory-class="org.knime.base.node.mine.smote.SmoteNodeFactory"
            category-path="/manipulation/column/column-transform"
            id="org.knime.base.node.mine.smote.SmoteNodeFactory"/>
      <node
            category-path="/io/read"
            factory-class="org.knime.base.node.io.filereader.FileReaderNodeFactory"
            id="org.knime.base.node.io.filereader.FileReaderNodeFactory">
      </node>
      <node
            category-path="/view/property"
            factory-class="org.knime.base.node.viz.property.color.ColorManager2NodeFactory"
            id="org.knime.base.node.viz.property.color.ColorManager2NodeFactory">
      </node>
      <node
            after="org.knime.base.node.viz.property.color.ColorManager2NodeFactory"
            category-path="/view/property"
            factory-class="org.knime.base.node.viz.property.size.SizeManager2NodeFactory"
            id="org.knime.base.node.viz.property.size.SizeManager2NodeFactory"/>
      <node
	        after="org.knime.base.node.viz.property.size.SizeManager2NodeFactory"
            category-path="/view/property"
            factory-class="org.knime.base.node.viz.property.shape.ShapeManagerNodeFactory"
            id="org.knime.base.node.viz.property.shape.ShapeManagerNodeFactory">
      </node>
      <node
            after="org.knime.base.node.viz.property.shape.ShapeManagerNodeFactory"
            category-path="/view/property"
            factory-class="org.knime.base.node.viz.property.color.ColorAppender2NodeFactory"
            id="org.knime.base.node.viz.property.color.ColorAppenderNodeFactory">
      </node>
      <node
            after="org.knime.base.node.viz.property.color.ColorAppenderNodeFactory"
            category-path="/view/property"
            factory-class="org.knime.base.node.viz.property.size.SizeAppenderNodeFactory"
            id="org.knime.base.node.viz.property.size.SizeAppenderNodeFactory">
      </node>
      <node
            after="org.knime.base.node.viz.property.size.SizeAppenderNodeFactory"
            category-path="/view/property"
            factory-class="org.knime.base.node.viz.property.shape.ShapeAppenderNodeFactory"
            id="org.knime.base.node.viz.property.shape.ShapeAppenderNodeFactory">
      </node>
      <node
            category-path="/view"
            factory-class="org.knime.base.node.viz.table.TableNodeFactory"
            id="org.knime.base.node.viz.table.TableNodeFactory">
      </node>
      <node
            category-path="/mining/modeleval"
            factory-class="org.knime.base.node.mine.scorer.accuracy.AccuracyScorerNodeFactory"
            id="org.knime.base.node.mine.scorer.scorer.AccuracyScorerNodeFactory">
      </node>
      <node
            category-path="/manipulation/column/column-filter"
            factory-class="org.knime.base.node.preproc.filter.column.FilterColumnNodeFactory"
            id="org.knime.base.node.preproc.filter.column.FilterColumnNodeFactory">
      </node>
      <node
            category-path="/manipulation/column/binning"
            factory-class="org.knime.base.node.preproc.binner.BinnerNodeFactory"
            id="org.knime.base.node.preproc.binner.BinnerNodeFactory"/>
      <node
            category-path="/io"
            factory-class="org.knime.base.node.util.cache.CacheNodeFactory"
            id="org.knime.base.node.util.cache.CacheNodeFactory"/>
      <node
            category-path="/mining/clustering"
            factory-class="org.knime.base.node.mine.cluster.kmeans.ClusterNodeFactory"
            id="org.knime.base.node.mine.cluster.kmeans.ClusterNodeFactory"/>
      <node
            category-path="/mining/rules/basisfunction"
            factory-class="org.knime.base.node.mine.bfn.fuzzy.FuzzyBasisFunctionLearnerNodeFactory"
            id="org.knime.base.node.mine.bfn.fuzzy.FuzzyBasisFunctionLearnerNodeFactory"/>
      <node
            category-path="/mining/rules/basisfunction"
            factory-class="org.knime.base.node.mine.bfn.fuzzy.FuzzyBasisFunctionPredictorNodeFactory"
            id="org.knime.base.node.mine.bfn.fuzzy.FuzzyBasisFunctionPredictorNodeFactory"/>
      <node
            category-path="/mining/nn/pnn"
            factory-class="org.knime.base.node.mine.bfn.radial.RadialBasisFunctionLearnerNodeFactory"
            id="org.knime.base.node.mine.bfn.radial.RadialBasisFunctionLearnerNodeFactory"/>
      <node
            category-path="/mining/nn/pnn"
            factory-class="org.knime.base.node.mine.bfn.radial.RadialBasisFunctionPredictorNodeFactory"
            id="org.knime.base.node.mine.bfn.radial.RadialBasisFunctionPredictorNodeFactory"/>
      <node
            factory-class="org.knime.base.node.util.sampledata.SampleDataNodeFactory"
            category-path="/io/artificial"
            id="org.knime.base.node.util.sampledata.SampleDataNodeFactory"/>
      <node
            category-path="/io/write"
            factory-class="org.knime.base.node.io.csvwriter.CSVWriterNodeFactory"
            id="org.knime.base.node.io.csvwriter.CSVWriterNodeFactory"/>
      <node
            category-path="/manipulation/column/column-split+combine"
            factory-class="org.knime.base.node.preproc.joiner.NewJoinerNodeFactory"
            id="org.knime.base.node.preproc.joiner.NewJoinerNodeFactory"/>
      <node
            category-path="/manipulation/column/column-split+combine"
            factory-class="org.knime.base.node.preproc.split.SplitNodeFactory"
            id="org.knime.base.node.preproc.split.SplitNodeFactory"/>
      <node
            after="org.knime.base.node.io.csvwriter.CSVWriterNodeFactory"
            factory-class="org.knime.base.node.io.arffwriter.ARFFWriterNodeFactory"
            category-path="/io/write"
            id="org.knime.base.node.io.arffwriter.ARFFWriterNodeFactory"/>
      <node
            category-path="/manipulation/row/row-transform"
            factory-class="org.knime.base.node.preproc.sorter.SorterNodeFactory"
            id="org.knime.base.node.preproc.sorter.SorterNodeFactory"/>
      <node
            after="org.knime.base.node.io.filereader.FileReaderNodeFactory"
            factory-class="org.knime.base.node.io.arffreader.ARFFReaderNodeFactory"
            category-path="/io/read"
            id="org.knime.base.node.io.arffreader.ARFFReaderNodeFactory"/>
      <node
            category-path="/statistics"
            factory-class="org.knime.base.node.viz.statistics.Statistics2NodeFactory"
            id="org.knime.base.node.viz.statistics.Statistics2NodeFactory"
            after="org.knime.base.node.preproc.correlation.pmcc.PMCCFilterNodeFactory"/>
      <node
            category-path="/manipulation/column/column-transform"
            factory-class="org.knime.base.node.preproc.normalize.NormalizerNodeFactory"
            id="org.knime.base.node.preproc.normalize.NormalizeNodeFactory"/>
      <node
            category-path="/manipulation/column/column-convert+replace"
            factory-class="org.knime.base.node.preproc.domain.DomainNodeFactory"
            id="org.knime.base.node.preproc.domain.DomainNodeFactory"/>
     <node
            category-path="/manipulation/row/row-transform"
            factory-class="org.knime.base.node.preproc.append.row.AppendedRowsNodeFactory"
            id="org.knime.base.node.preproc.append.row.AppendedRowsNodeFactory"/>
      <node
            category-path="/manipulation/row/row-filter"
            factory-class="org.knime.base.node.preproc.filter.row.RowFilterNodeFactory"
            id="org.knime.base.node.preproc.filter.row.RowFilterNodeFactory"/>
      <node
            after="org.knime.base.node.preproc.filter.row.RowFilterNodeFactory"
            category-path="/manipulation/row/row-filter"
            factory-class="org.knime.base.node.preproc.filter.row.RowFilter2PortNodeFactory"
            id="org.knime.base.node.preproc.filter.row.RowFilter2PortNodeFactory"/>
      <node
            factory-class="org.knime.base.node.preproc.shuffle.ShuffleNodeFactory"
            category-path="/manipulation/row/row-transform"
            id="org.knime.base.node.preproc.shuffle.ShuffleNodeFactory"/>
      <node
            factory-class="org.knime.base.node.preproc.sample.SamplingNodeFactory"
            category-path="/manipulation/row/row-transform"
            id="org.knime.base.node.preproc.sample.SamplingNodeFactory"/>
      <node
            factory-class="org.knime.base.node.preproc.partition.PartitionNodeFactory"
            category-path="/manipulation/row/row-transform"
            id="org.knime.base.node.preproc.partition.PartitionNodeFactory"/>
      <node
            category-path="/mining/clustering"
            factory-class="org.knime.base.node.mine.cluster.fuzzycmeans.FuzzyClusterNodeFactory"
            id="org.knime.base.node.mine.cluster.fuzzycmeans.FuzzyClusterNodeFactory"/>
      <node
            factory-class="org.knime.base.node.preproc.missingval.MissingValueHandlingNodeFactory"
            category-path="/manipulation/column/column-transform"
            id="org.knime.base.node.preproc.missingval.MissingValueHandlingNodeFactory"/>
      <node
            category-path="/mining/nn/mlp"
            factory-class="org.knime.base.node.mine.neural.rprop.RPropNodeFactory"
            id="org.knime.base.node.mine.neural.rprop.RPropNodeFactory"/>
      <node
            category-path="/mining/nn/mlp"
            factory-class="org.knime.base.node.mine.neural.mlp.MLPPredictorNodeFactory"
            id="org.knime.base.node.mine.neural.mlp.MLPPredictorNodeFactory"/>
      <node
            after="org.knime.base.node.io.pmml.write.PMMLWriterNodeFactory"
            category-path="/io/write"
            factory-class="org.knime.base.node.io.predictor.PredictorWriterNodeFactory"
            id="org.knime.base.node.io.predictor.PredictorWriterNodeFactory"/>
      <node
            after="org.knime.base.node.io.pmml.read.PMMLReaderNodeFactory"
            category-path="/io/read"
            factory-class="org.knime.base.node.io.predictor.PredictorReaderNodeFactory"
            id="org.knime.base.node.io.predictor.PredictorReaderNodeFactory"/>
      <node
            category-path="/manipulation/matrix"
            factory-class="org.knime.base.node.preproc.transpose.TransposeTableNodeFactory"
            id="org.knime.base.node.preproc.transpose.TransposeTableNodeFactory"/>
      <node
            category-path="/mining/dtree"
            factory-class="org.knime.base.node.mine.decisiontree2.predictor.DecTreePredictorNodeFactory"
            id="org.knime.base.node.mine.decisiontreenew.predictor.DecTreePredictorNodeFactory"/>
      <node
            category-path="/mining/clustering"
            factory-class="org.knime.base.node.mine.sota.SotaLearnerNodeFactory"
            id="org.knime.base.node.mine.sota.SotaLearnerNodeFactory"/>
      <node
            category-path="/manipulation/column/column-convert+replace"
            factory-class="org.knime.base.node.preproc.rename.RenameNodeFactory"
            id="org.knime.base.node.preproc.rename.RenameNodeFactory"/>
      <node
            category-path="/mining/subgroup"
            factory-class="org.knime.base.node.mine.subgroupminer.BitVectorGeneratorNodeFactory"
            id="org.knime.base.node.mine.subgroupminer.BitVectorGeneratorNodeFactory"/>
      <node
            category-path="/mining/subgroup"
            factory-class="org.knime.base.node.mine.subgroupminer.SubgroupMinerFactory"
            id="org.knime.base.node.mine.subgroupminer.SubgroupMinerFactory"/>
	   <node
	         category-path="/statistics/regression"
	         factory-class="org.knime.base.node.mine.regression.linear.learn.LinRegLearnerNodeFactory"
	         id="org.knime.base.node.mine.regression.linear.learn.LinRegLearnerNodeFactory"/>
	   <node
          category-path="/statistics/regression"
          factory-class="org.knime.base.node.mine.regression.predict.RegressionPredictorNodeFactory"
          id="org.knime.base.node.mine.regression.predict.RegressionPredictorNodeFactory"/>
	    <node
	          category-path="/mining/modeleval"
	          factory-class="org.knime.base.node.mine.scorer.entrop.NewEntropyNodeFactory"
	          id="org.knime.base.node.mine.scorer.entrop.NewEntropyNodeFactory"/>
	    <node
	          after="org.knime.base.node.io.arffreader.ARFFReaderNodeFactory"
	          category-path="/io/read"
	          factory-class="org.knime.base.node.io.table.read.ReadTableNodeFactory"
	          id="org.knime.base.node.io.table.read.ReadTableNodeFactory"/>
	    <node
	          after="org.knime.base.node.io.arffwriter.ARFFWriterNodeFactory"
	          category-path="/io/write"
	          factory-class="org.knime.base.node.io.table.write.WriteTableNodeFactory"
	          id="org.knime.base.node.io.table.write.WriteTableNodeFactory"/>
     <node
           category-path="/manipulation/row/row-transform"
           factory-class="org.knime.base.node.mine.subgroupminer.BitVectorGeneratorNodeFactory"
           id="org.knime.base.node.mine.subgroupminer.BitVectorGeneratorNodeFactory"/>
     <node
           category-path="/view"
           factory-class="org.knime.base.node.viz.histogram.node.HistogramNodeFactory"
           id="org.knime.base.node.viz.histogram.node.HistogramNodeFactory"/>
     <node
           category-path="/view"
           factory-class="org.knime.base.node.viz.histogram.node.FixedColumnHistogramNodeFactory"
           id="org.knime.base.node.viz.histogram.node.FixedColumnHistogramNodeFactory"/>
     <node
           category-path="/manipulation/column/column-transform"
           factory-class="org.knime.base.node.preproc.normalize.NormalizerApplyNodeFactory"
           id="org.knime.base.node.preproc.normalize.NormalizeApplyNodeFactory"/>
     <node
           category-path="/view"
           factory-class="org.knime.base.node.viz.plotter.box.BoxPlotNodeFactory"
           id="org.knime.base.node.viz.plotter.box.BoxPlotNodeFactory"/>
     <node
           category-path="/view"
           factory-class="org.knime.base.node.viz.plotter.line.LinePlotterNodeFactory"
           id="org.knime.base.node.viz.plotter.line.LinePlotterNodeFactory"/>
     <node
           category-path="/view"
           factory-class="org.knime.base.node.viz.plotter.parcoord.ParallelCoordinateNodeFactory"
           id="org.knime.base.node.viz.plotter.parcoord.ParallelCoordinateNodeFactory"/>
     <node
           category-path="/view"
           factory-class="org.knime.base.node.viz.plotter.scatter.ScatterPlotterNodeFactory"
           id="org.knime.base.node.viz.plotter.scatter.ScatterPlotterNodeFactory"/>
     <node
           category-path="/view"
           factory-class="org.knime.base.node.viz.plotter.scattermatrix.ScatterMatrixNodeFactory"
           id="org.knime.base.node.viz.plotter.scattermatrix.ScatterMatrixNodeFactory"/>
     <node
           category-path="/manipulation/row/row-filter"
           factory-class="org.knime.base.node.preproc.filter.hilite.HiliteFilterNodeFactory"
           id="org.knime.base.node.preproc.hilite"/>
    <node
         after="org.knime.base.node.preproc.binner.BinnerNodeFactory"
		 category-path="/manipulation/column/binning"
         factory-class="org.knime.base.node.preproc.discretization.caim2.modelcreator.CAIMDiscretization2NodeFactory"
         id="org.knime.base.node.preproc.discretization.caim.modelcreator.CAIMDiscretizationNodeFactory"/>
    <node
         after="org.knime.base.node.preproc.discretization.caim2.modelcreator.CAIMDiscretizationNodeFactory"
   		 category-path="/manipulation/column/binning"
         factory-class="org.knime.base.node.preproc.discretization.caim2.modelapply.Discretization2ApplyNodeFactory"
         id="org.knime.base.node.preproc.discretization.caim.modelapply.DiscretizationApplyNodeFactory"/>
    <node
         factory-class="org.knime.base.node.preproc.rowkey.RowKeyNodeFactory"
         category-path="/manipulation/row"
         id="org.knime.base.node.preproc.rowkey.RowKeyNodeFactory"/>
      <node
            category-path="/mining/miscClass"
            factory-class="org.knime.base.node.mine.knn.KnnNodeFactory"
            id="org.knime.base.node.mine.knn.KnnNodeFactory"/>  
   <node
         category-path="/mining/clustering"
         factory-class="org.knime.base.node.mine.cluster.hierarchical.HierarchicalClusterNodeFactory"
         id="org.knime.base.node.mine.cluster.hierarchical.HierarchicalClusterNodeFactory"/>
   <node
         category-path="/mining/clustering"
         factory-class="org.knime.base.node.mine.sota.predictor.SotaPredictorNodeFactory"
         id="org.knime.base.node.mine.sota.predictor.SotaPredictorNodeFactory"/>         
      <node
            category-path="/statistics/regression"
            factory-class="org.knime.base.node.mine.regression.polynomial.learner.PolyRegLearnerNodeFactory"
	        id="org.knime.dev.nodes.polyreg.learner.PolyRegLearnerNodeFactory"/>
      <node
            category-path="/view"
            factory-class="org.knime.base.node.viz.pie.node.fixed.FixedPieNodeFactory"
            id="org.knime.base.node.viz.pie.node.fixed.FixedPieNodeFactory">
      </node>
      <node
            category-path="/view"
            factory-class="org.knime.base.node.viz.pie.node.interactive.InteractivePieNodeFactory"
            id="org.knime.base.node.viz.pie.node.interactive.InteractivePieNodeFactory">
      </node>
      <node
            category-path="/mining/dtree"
            factory-class="org.knime.base.node.mine.decisiontree2.learner.DecisionTreeLearnerNodeFactory"
            id="org.knime.base.node.mine.decisiontree2.learner.DecisionTreeLearnerNodeFactory">
      </node>
      <node
            category-path="/manipulation/row/row-transform"
            factory-class="org.knime.base.node.preproc.groupby.GroupByNodeFactory"
            id="org.knime.base.node.preproc.groupby.GroupByNodeFactory"/>
      <node
            category-path="/manipulation/row/row-transform"
            factory-class="org.knime.base.node.preproc.pivot.PivotNodeFactory"
            id="org.knime.base.node.preproc.pivot.PivotNodeFactory"/>
      <node
            category-path="/mining/bayes"
            factory-class="org.knime.base.node.mine.bayes.naivebayes.predictor.NaiveBayesPredictorNodeFactory"
            id="org.knime.base.node.mine.bayes.naivebayes.predictor.NaiveBayesPredictorNodeFactory"/>
      <node
            category-path="/mining/bayes"
            factory-class="org.knime.base.node.mine.bayes.naivebayes.learner.NaiveBayesLearnerNodeFactory"
            id="org.knime.base.node.bayes.mine.naivebayes.learner.NaiveBayesLearnerNodeFactory"/>
      <node
            category-path="/statistics"
            factory-class="org.knime.base.node.preproc.correlation.pmcc.PMCCNodeFactory"
            id="org.knime.base.node.preproc.correlation.pmcc.PMCCNodeFactory"/>
      <node
            after="org.knime.base.node.correlation.pmcc.PMCCNodeFactory"
            category-path="/statistics"
            factory-class="org.knime.base.node.preproc.correlation.pmcc.PMCCFilterNodeFactory"
            id="org.knime.base.node.preproc.correlation.pmcc.PMCCFilterNodeFactory"/>
      <node
            category-path="/manipulation/column/column-filter"
            factory-class="org.knime.base.node.preproc.lowvarfilter.LowVarFilterNodeFactory"
            id="org.knime.base.node.preproc.lowvarfilter.LowVarFilterNodeFactory"/>
      <node
            category-path="/statistics"
            factory-class="org.knime.base.node.preproc.valcount.ValueCounterNodeFactory"
            id="org.knime.base.node.preproc.valcount.ValueCounterNodeFactory"
            after="org.knime.base.node.viz.statistics.Statistics2NodeFactory"/>
      <node
            category-path="/mining/mds"
            factory-class="org.knime.base.node.mine.mds.MDSNodeFactory"
            id="org.knime.base.node.mine.mds.MDSNodeFactory"/>
      <node
            category-path="/mining/mds"
            factory-class="org.knime.base.node.mine.mds.mdsprojection.MDSProjectionNodeFactory"
            id="org.knime.base.node.mine.mds.mdsprojection.MDSProjectionNodeFactory"/>
      <node
            category-path="/mining/modeleval"
            factory-class="org.knime.base.node.viz.enrichment.EnrichmentPlotterFactory"
            id="org.knime.chem.node.viz.enrich.EnrichmentPlotterFactory"/>
      <node
            category-path="/mining/svm"
            factory-class="org.knime.base.node.mine.svm.learner.SVMLearnerNodeFactory"
            id="org.knime.base.node.mine.svm.learner.SVMLearnerNodeFactory">
      </node>
      <node
            category-path="/mining/svm"
            factory-class="org.knime.base.node.mine.svm.predictor.SVMPredictorNodeFactory"
            id="org.knime.base.node.mine.svm.predictor.SVMPredictorNodeFactory">
      </node>
      <node
            category-path="/manipulation/column/column-transform"
            factory-class="org.knime.base.node.preproc.colcompare.ColumnComparatorNodeFactory"
            id="org.knime.base.node.preproc.colcompare.ColumnComparatorNodeFactory"/>
      <node
            category-path="/manipulation/row/row-filter"
            factory-class="org.knime.base.node.preproc.rowsplit.NumericRowSplitterNodeFactory"
            id="org.knime.base.node.preproc.rowsplit.NumericRowSplitterNodeFactory"/>
      <node
            category-path="/manipulation/column/column-convert+replace"
            factory-class="org.knime.base.node.preproc.stringreplacer.StringReplacerNodeFactory"
            id="org.knime.base.node.preproc.stringreplacer.StringReplacerNodeFactory"/>
      <node
            category-path="/manipulation/column/column-transform"
            factory-class="org.knime.base.node.preproc.caseconvert.CaseConvertNodeFactory"
            id="org.knime.base.node.preproc.caseconvert.CaseConvertNodeFactory"/>
      <node
            category-path="/manipulation/column/column-convert+replace"
            factory-class="org.knime.base.node.preproc.stringreplacer.dict.SearchReplaceDictNodeFactory"
            id="org.knime.base.node.preproc.stringreplacer.dict.SearchReplaceDictNodeFactory"/>
      <node
            category-path="/manipulation/column/column-split+combine"
            factory-class="org.knime.base.node.preproc.cellsplit.CellSplitterNodeFactory"
            id="org.knime.base.node.preproc.cellsplit.CellSplitterNodeFactory"/>
      <node
            category-path="/manipulation/column/column-convert+replace"
            factory-class="org.knime.base.node.preproc.colconvert.numbertostring.NumberToStringNodeFactory"
            id="org.knime.base.node.preproc.colconvert.numbertostring.NumberToStringNodeFactory"/>
      <node  
            after="org.knime.base.node.preproc.colconvert.numbertostring.NumberToStringNodeFactory"
            category-path="/manipulation/column/column-convert+replace"
            factory-class="org.knime.base.node.preproc.colconvert.stringtonumber.StringToNumberNodeFactory"
            id="org.knime.base.node.preproc.colconvert.stringtonumber.StringToNumberNodeFactory"/>
      <node
            category-path="/manipulation/column/column-transform"
            factory-class="org.knime.base.node.preproc.columnTrans.One2ManyColNodeFactory"
            id="org.knime.base.node.preproc.columnTrans.One2ManyColNodeFactory">
      </node>
      <node
            after="org.knime.base.node.preproc.columnTrans.One2ManyColNodeFactory"
            category-path="/manipulation/column/column-transform"
            factory-class="org.knime.base.node.preproc.columnTrans.Many2OneColNodeFactory"
            id="org.knime.base.node.preproc.columnTrans.Many2OneColNodeFactory">
      </node>
      <node
            category-path="/manipulation/column/column-split+combine"
            factory-class="org.knime.base.node.preproc.colcombine.ColCombineNodeFactory"
            id="org.knime.base.node.preproc.colcombine.ColCombineNodeFactory">
      </node>
      <node
            category-path="/mining/clustering"
            factory-class="org.knime.base.node.mine.cluster.assign.ClusterAssignerNodeFactory"
            id="org.knime.base.node.mine.cluster.assign.ClusterAssignerNodeFactory">
      </node>
      <node
            category-path="/mining/modeleval"
            factory-class="org.knime.base.node.viz.roc.ROCNodeFactory"
            id="org.knime.base.node.viz.roc.ROCNodeFactory">
      </node>
       <node
            category-path="/database"
            factory-class="org.knime.base.node.io.database.DBReaderNodeFactory"
            id="org.knime.base.node.io.database.DBReaderNodeFactory"/>
       <node
            after="org.knime.base.node.io.database.DBReaderNodeFactory"
            category-path="/database"
            factory-class="org.knime.base.node.io.database.DBReaderConnectionNodeFactory"
            id="org.knime.base.node.io.database.DBReaderConnectionNodeFactory">
   	  </node>
   	  <node
            after="org.knime.base.node.io.database.DBReaderConnectionNodeFactory"
            category-path="/database"
            factory-class="org.knime.base.node.io.database.DatabaseLoopingNodeFactory"
            id="org.knime.base.node.io.database.DatabaseLoopingNodeFactory">
      </node>
      <node
            after="org.knime.base.node.io.database.DatabaseLoopingnNodeFactory"
            category-path="/database"
            factory-class="org.knime.base.node.io.database.DBConnectionNodeFactory"
            id="org.knime.base.node.io.database.DBConnectionNodeFactory">
      </node>
      <node
            after="org.knime.base.node.io.database.DBReaderConnectionNodeFactory"
            category-path="/database"
            factory-class="org.knime.base.node.io.database.DBRowFilterNodeFactory"
            id="org.knime.base.node.io.database.DBRowFilterNodeFactory"/>
      <node
            after="org.knime.base.node.io.database.DBRowFilterNodeFactory"
            category-path="/database"
            factory-class="org.knime.base.node.io.database.DBQueryNodeFactory"
            id="org.knime.base.node.io.database.DBQueryNodeFactory"/>
      <node
            after="org.knime.base.node.io.database.DBQueryNodeFactory"
            category-path="/database"
            factory-class="org.knime.base.node.io.database.DBColumnFilterNodeFactory"
            id="org.knime.base.node.io.database.DBColumnFilterNodeFactory"/>
      <node
            after="org.knime.base.node.io.database.DBColumnFilterNodeFactory"
            category-path="/database"
            factory-class="org.knime.base.node.io.database.DBConnectionWriterNodeFactory"
            id="org.knime.base.node.io.database.DBConnectionWriterNodeFactory"/>
      <node
            after="org.knime.base.node.io.database.DBConnectionWriterNodeFactory"
            category-path="/database"
            factory-class="org.knime.base.node.io.database.DBWriterNodeFactory"
            id="org.knime.base.node.io.database.DBWriterNodeFactory"/>
      <node
            category-path="/manipulation/column/column-split+combine"
            factory-class="org.knime.base.node.preproc.cellsplitbypos.CellSplitterByPosNodeFactory"
            id="org.knime.base.node.preproc.cellsplitbypos.CellSplitterByPositionNodeFactory">
      </node>
      <node
            category-path="/view"
            factory-class="org.knime.base.node.viz.condbox.ConditionalBoxPlotNodeFactory"
            id="org.knime.base.node.viz.condbox.ConditionalBoxPlotNodeFactory"/>
      <node
            after="org.knime.base.node.preproc.filter.column.FilterColumnNodeFactory"
            category-path="/manipulation/column/column-filter"
            factory-class="org.knime.base.node.preproc.filter.columnref.ColumnFilterRefNodeFactory"
            id="org.knime.base.node.preproc.filter.columnref.ColumnFilterRefNodeFactory">
      </node>
      <node
            category-path="/manipulation/row/row-filter"
            factory-class="org.knime.base.node.preproc.filter.rowref.RowFilterRefNodeFactory"
            id="org.knime.base.node.preproc.filter.rowref.RowFilterRefNodeFactory">
      </node>
       <node
             category-path="/manipulation/column/column-split+combine"
             factory-class="org.knime.base.collection.list.create.CollectionCreateNodeFactory"
             id="org.knime.base.collection.list.create.CollectionCreateNodeFactory">
       </node>
       <node
             after="org.knime.base.collection.list.create.CollectionCreateNodeFactory"
             category-path="/manipulation/column/column-split+combine"
             factory-class="org.knime.base.collection.list.split.CollectionSplitNodeFactory"
             id="org.knime.base.collection.list.split.CollectionSplitNodeFactory">
       </node>
      <node
            after="org.knime.base.node.io.table.read.ReadTableNodeFactory"
            category-path="/io/read"
            factory-class="org.knime.base.node.io.pmml.read.PMMLReaderNodeFactory"
            id="org.knime.base.node.io.PMMLReaderNodeFactory">
      </node>
      <node
            category-path="/manipulation/column/column-split+combine"
            factory-class="org.knime.base.node.preproc.regexsplit.RegexSplitNodeFactory"
            id="org.knime.base.node.preproc.regexsplit.RegexSplitNodeFactory">
      </node>
      <node
            after="org.knime.base.node.io.table.write.WriteTableNodeFactory"
            category-path="/io/write"
            factory-class="org.knime.base.node.io.pmml.write.PMMLWriterNodeFactory"
            id="org.knime.base.node.io.pmml.write.PMMLWriterNodeFactory">
      </node>
      <node
            category-path="manipulation/column/column-transform"
            factory-class="org.knime.base.node.preproc.colsort.ColumnResorterNodeFactory"
            id="org.knime.base.node.preproc.colsort.ColumnResorterNodeFactory">
      </node>
      <node
            category-path="/view"
            factory-class="org.knime.base.node.viz.liftchart.LiftChartNodeFactory"
            id="org.knime.base.node.viz.liftchart.LiftChartNodeFactory">
      </node>
      <node
            category-path="/manipulation/column/column-transform"
            factory-class="org.knime.base.node.preproc.setoperator.SetOperatorNodeFactory"
            id="org.knime.base.node.preproc.setoperator.SetOperatorNodeFactory">
      </node>
      <node
            category-path="/loopsupport/crossvalidation"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.xvalidation.XValidatePartitionerFactory"
            id="org.knime.base.node.meta.xvalidation.XValidatePartitionerFactory">
      </node>
      <node
            after="org.knime.base.node.meta.xvalidation.XValidatePartitionerFactory"
            category-path="/loopsupport/crossvalidation"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.xvalidation.AggregateOutputNodeFactory"
            id="org.knime.base.node.meta.xvalidation.AggregateOutputNodeFactory">
      </node>
      <node
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.looper.LoopStartCountNodeFactory"
            id="org.knime.base.node.meta.looper.LoopStartCountNodeFactory">
      </node>
      <node
            after="org.knime.base.node.flowvariable.variableloophead.LoopStartVariableNodeFactory"
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.looper.LoopEndNodeFactory"
            id="org.knime.base.node.meta.looper.LoopEndNodeFactory">
      </node>
      <node
            category-path="/loopsupport/features"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.feature.backwardelim.BWElimLoopStart1NodeFactory"
            id="org.knime.base.node.meta.feature.backwardelim.BWElimLoopStart1NodeFactory">
      </node>
      <node
            after="org.knime.base.node.meta.feature.backwardelim.BWElimLoopStart1NodeFactory"
            category-path="/loopsupport/features"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.feature.backwardelim.BWElimLoopStart2NodeFactory"
            id="org.knime.base.node.meta.feature.backwardelim.BWElimLoopStart2NodeFactory">
      </node>
      <node
            after="org.knime.base.node.meta.feature.backwardelim.BWElimLoopStart2NodeFactory"
            category-path="/loopsupport/features"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.feature.backwardelim.BWElimLoopEndNodeFactory"
            id="org.knime.base.node.meta.feature.backwardelim.BWElimLoopEndNodeFactory">
      </node>
      <node
            after="org.knime.base.node.meta.feature.backwardelim.BWElimLoopEndNodeFactory"
            category-path="/loopsupport/features"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.feature.backwardelim.BWElimFilterNodeFactory"
            id="org.knime.base.node.meta.feature.backwardelim.BWElimFilterNodeFactory">
      </node>
       <node
             after="org.knime.base.node.flowvariable.variabletotablerow.VariableToTableNodeFactory"
             category-path="/loopsupport"
             expert-flag="true"
             factory-class="org.knime.base.node.flowvariable.appendvariabletotable.AppendVariableToTableNodeFactory"
             id="org.knime.base.node.flowvariable.variabletotable.AppendVariableToTableNodeFactory">
       </node>
       <node
             after="org.knime.base.node.flowvariable.tablerowtovariable.TableToVariableNodeFactory"
             category-path="/loopsupport"
             expert-flag="true"
             factory-class="org.knime.base.node.flowvariable.variabletotablerow.VariableToTableNodeFactory"
             id="org.knime.base.node.flowvariable.variabletotablerow.VariableToTableNodeFactory">
       </node>
       <node
             after="org.knime.base.node.flowvariable.extractvariables.ExtractVariablesDBNodeFactory"
             category-path="/loopsupport"
             expert-flag="true"
             factory-class="org.knime.base.node.flowvariable.tablerowtovariable.TableToVariableNodeFactory"
             id="org.knime.base.node.flowvariable.tablerowtovariable.TableToVariableNodeFactory">
       </node>
      <node
            after="org.knime.base.node.io.filereader.VariableFileReaderNodeFactory"
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.flowvariable.injectvariables.InjectVariablesNodeFactory"
            id="org.knime.base.node.flowvariable.injectvariables.InjectVariablesNodeFactory">
      </node>
      <node
            after="org.knime.base.node.flowvariable.injectvariables.InjectVariablesNodeFactory"
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.flowvariable.injectvariables.InjectVariablesDBNodeFactory"
            id="org.knime.base.node.flowvariable.injectvariables.InjectVariablesDBNodeFactory">
      </node>
      <node
            after="org.knime.base.node.meta.looper.LoopStartCountNodeFactory"
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.looper.condition.LoopStartGenericNodeFactory"
            id="org.knime.base.node.meta.looper.condition.LoopStartGenericNodeFactory">
      </node>
      <node
            after="org.knime.base.node.meta.looper.LoopEndNodeFactory"
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.looper.condition.LoopEndConditionNodeFactory"
            id="org.knime.base.node.meta.looper.condition.LoopEndConditionNodeFactory">
      </node>
      <node
            after="org.knime.base.node.meta.looper.condition.LoopStartGenericNodeFactory"
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.flowvariable.variableloophead.LoopStartVariableNodeFactory"
            id="org.knime.base.node.flowvariable.variableloophead.LoopStartVariableNodeFactory">
      </node>
      <node
            after="org.knime.base.node.meta.looper.condition.LoopEndConditionNodeFactory"
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.io.filereader.VariableFileReaderNodeFactory"
            id="org.knime.base.node.io.filereader.VariableFileReaderNodeFactory">
      </node>
      <node
            after="org.knime.base.node.flowvariable.injectvariables.InjectVariablesDBNodeFactory"
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.flowvariable.extractvariables.ExtractVariablesNodeFactory"
            id="org.knime.base.node.flowvariable.extractvariables.ExtractVariablesNodeFactory">
      </node>
      <node
            after="org.knime.base.node.flowvariable.extractvariables.ExtractVariablesNodeFactory"
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.flowvariable.extractvariables.ExtractVariablesDBNodeFactory"
            id="org.knime.base.node.flowvariable.extractvariables.ExtractVariablesDBNodeFactory">
      </node>
      <node
            category-path="manipulation/row/row-filter"
            factory-class="org.knime.base.node.preproc.filter.nominal.NominalValueRowFilterNodeFactory"
            id="org.knime.base.node.preproc.filter.nominal.NominalValueRowFilterNodeFactory">
      </node>
      <node
            category-path="/misc"
            factory-class="org.knime.base.node.rules.RuleEngineNodeFactory"
            id="org.knime.base.node.rules.RuleEngineNodeFactory">
      </node>
      <node
            category-path="/loopsupport"
            expert-flag="true"
            factory-class="org.knime.base.node.meta.looper.LoopStartIntervalNodeFactory"
            id="org.knime.base.node.meta.looper.LoopStartIntervalNodeFactory">
      </node>

      <node
            after="org.knime.base.node.preproc.pivot.PivotNodeFactory"
            category-path="/manipulation/row/row-transform"
            factory-class="org.knime.base.node.preproc.unpivot.UnpivotNodeFactory"
            id="org.knime.base.node.preproc.unpivot.UnpivotNodeFactory">
      </node>

      <node
            category-path="/mining/pca"
            factory-class="org.knime.base.node.mine.pca.PCANodeFactory"
            id="org.knime.base.node.mine.pca.PCANodeFactory">
      </node>
      <node
            after="org.knime.base.node.mine.pca.PCANodeFactory"
            category-path="/mining/pca"
            factory-class="org.knime.base.node.mine.pca.PCAComputeNodeFactory"
            id="org.knime.base.node.mine.pca.PCAComputeNodeFactory">
      </node>
      <node
            after="org.knime.base.node.mine.pca.PCAComputeNodeFactory"
            category-path="/mining/pca"
            factory-class="org.knime.base.node.mine.pca.PCAApplyNodeFactory"
            id="org.knime.base.node.mine.pca.PCAApplyNodeFactory">
      </node>
      <node
            after="org.knime.base.node.mine.pca.PCAApplyNodeFactory"
            category-path="/mining/pca"
            factory-class="org.knime.base.node.mine.pca.PCAReverseNodeFactory"
            id="org.knime.base.node.mine.pca.PCAReverseNodeFactory">
      </node>
      <node
            after="org.knime.base.node.preproc.colconvert.stringtonumber.StringToNumberNodeFactory"
            category-path="/manipulation/column/column-convert+replace"
            factory-class="org.knime.base.node.preproc.double2int.DoubleToIntNodeFactory"
            id="org.knime.base.node.preproc.double2int.DoubleToIntNodeFactory">
      </node>
      <node
            category-path="/manipulation/column"
            factory-class="org.knime.base.node.preproc.filter.hilite.collector.HiLiteCollectorNodeFactory"
            id="org.knime.base.node.preproc.filter.hilite.collector.HiLiteCollectorNodeFactory">
      </node>
   </extension>
      <extension
         point="org.knime.base.pmmlports">
      <PMMLModel
            PMMLPortObject="org.knime.base.node.mine.cluster.PMMLClusterPortObject"
            modeltype="ClusteringModel">
      </PMMLModel>
      <PMMLModel
            PMMLPortObject="org.knime.base.node.mine.svm.PMMLSVMPortObject"
            modeltype="SupportVectorMachineModel">
      </PMMLModel>
      <PMMLModel
            PMMLPortObject="org.knime.base.node.mine.regression.PMMLRegressionPortObject"
            modeltype="RegressionModel">
      </PMMLModel>
      <PMMLModel
            PMMLPortObject="org.knime.base.node.mine.neural.mlp.PMMLNeuralNetworkPortObject"
            modeltype="NeuralNetwork">
      </PMMLModel>
      <PMMLModel
            PMMLPortObject="org.knime.base.node.mine.decisiontree2.PMMLDecisionTreePortObject"
            modeltype="TreeModel">
      </PMMLModel>
   </extension>
   
      
   <extension point="org.knime.workbench.repository.metanode">
       <PersistedMetaNode description="Provides a skeleton of nodes necessary for cross validation" icon="icons/meta_nodes/cross_validation_flow.png" id="cross_validation" name="X-Validation" workflowDir="metanode_templates/Cross Validation/">
       </PersistedMetaNode>
       <PersistedMetaNode expert-flag="true" icon="icons/meta_nodes/variables_looper_flow.png" id="variables_loop" name="Variables Loop (Data)" workflowDir="metanode_templates/Variables Loop (Data)/">
       </PersistedMetaNode>
       <PersistedMetaNode expert-flag="true" icon="icons/meta_nodes/variables_looper_db_flow.png" id="variables_loop_db" name="Variables Loop (Database)" workflowDir="metanode_templates/Variables Loop (Database)/">
       </PersistedMetaNode>
       <PersistedMetaNode category-path="/meta" description="Backward Feature Elimination" icon="icons/meta_nodes/feature_elimination_flow.png" id="feature_elimination" name="Feature Elimination" workflowDir="metanode_templates/Feature Elimination/">
       </PersistedMetaNode>
       <PersistedMetaNode category-path="/meta" description="Iteratively executes the contained flow on a list of files. The list of files needs to be defined by the input table, whereby each row represents one individual file location." icon="icons/meta_nodes/looping_file_reader_flow.png" id="iterate_list_of_files" name="Iterate List of Files" workflowDir="metanode_templates/Iterate list of files/">
       </PersistedMetaNode>
       <PersistedMetaNode category-path="/meta" description="Executes the contained workflow multiple times. Aggregation method and termination criteration must be set using the loop start and end node contained in the workflow." icon="icons/meta_nodes/loop_x_times_flow.png" id="looper" name="Loop x-times" workflowDir="metanode_templates/Looper/">
       </PersistedMetaNode>
    </extension>
   
</plugin>
