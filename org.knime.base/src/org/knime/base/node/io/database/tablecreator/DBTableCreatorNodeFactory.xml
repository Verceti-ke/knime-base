<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="./db_table_creator.png" type="Source" xmlns="http://knime.org/node/v2.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v2.10 http://knime.org/node/v2.10.xsd">
    <name>Database Table Creator</name>
    
    <shortDescription>
        This node allows a user to create a new database table either manually or based on the data table spec of an
        input data table.
    </shortDescription>
    
    <fullDescription>
        <intro>
        	<p>
        	This node allows a user to create a new database table either manually or based on the data table spec of an
        	input data table. The node supports advanced options such as null or not null, primary key or unique keys,
        	default SQL type mapping based on column name or KNIME data type, and default key definitions based on column names.
        	</p>
        	<p>
        	Tick the "Use dynamic settings" option to show the dynamic settings tabs. The dynamic type settings can be used 
        	to dynamically define the SQL type of the columns. These settings can only be applied to the data table spec of the input data table. The
			mappings defined in the Name-Based SQL Type Mapping have a higher
			priority than the mappings defined in the KNIME-Based SQL Type Mapping.
			If no mapping is defined in both Name-Based SQL Type mapping
			and KNIME-Based SQL Type Mapping, then the default mapping is used. 
			</p>
        </intro>
        <tab name="Settings">
        	<option name="Schema">The schema of the table.</option>
        	<option name="Table name">The name of the table.</option>
        	<option name="Temporary table">If checked, a temporary table is created.</option>
        	<option name="If not exists">If checked, the table is only created when it doesn't exist in the database.</option>
        	<option name="Use dynamic settings">If checked, the dynamic settings tabs are shown and the dynamic settings are used. The table in "Columns" and 
        	"Keys" tab become read-only.</option>
        </tab>
        
        <tab name="Columns">
        	<option name="Column Name">The name of the column.</option>
        	<option name="Column Type">The type of the column. Double-click to edit or add a new SQL type.</option>
        	<option name="Not Null">If checked, the column cannot be null.</option>
        </tab>
        
		<tab name="Keys">
        	<option name="Key Name">The name of the key</option>
        	<option name="Key Columns">The columns used to define the key</option>
        	<option name="Primary Key">If checked, the key is a primary key. Otherwise, it is a unique key.</option>
        </tab>
        
        <tab name="Dynamic Type Settings">
        	<option name="Name-Based SQL Type Mapping">
        	<p>
        	In the Name-Based SQL Type Mapping, a user can define the default SQL type mapping for a set of
			columns based on the column names. Use the "Add" button
			to add a new row containing the name pattern of the columns that should
			be mapped. The name pattern can either be a string with wildcard or
			a regular expression. 
			</p>
			<p>
			Supported wildcards are * (matches any number of
			characters) and ? (matches one character) e.g. KNI* would
			match all strings that start with KNI such as KNIME whereas KNI? would match
			only strings that start with KNI followed by a fourth
			character. Double click the "Name Pattern" cell to edit the pattern.
			</p>
        	</option>
        	<option name="KNIME-Based SQL Type Mapping">
        	In the KNIME-based SQL Type Mapping, a user can define the default SQL type mapping based on KNIME data type. Use the "Add" button to add a new row 
	        containing the KNIME data type that should be mapped.
        	</option>			
	        <option name="Name Pattern">The name pattern of the columns.</option>
			<option name="RegEx">Check this option if the search pattern is a regular expression, otherwise it is treated as string with wildcards ('*' and '?').</option>
	        <option name="SQL Type">The SQL type that should be mapped to the columns. Double-click to edit or add a new SQL type.</option>		
	        <option name="KNIME Type">The KNIME data type of the columns.</option>        		     		
        </tab>
        
        <tab name="Dynamic Keys Settings">
        	<option name="Dynamic Keys Settings">
        	The Dynamic Keys Settings can be used to dynamically define the key
			definitions based on the column names. Use the "Add" button
			to add a new row containing the name pattern of the columns that
			should be used to define a new key. The name pattern can either be a
			string with wildcard or a regular expression. Take a look at the description of "Name-Based SQL Type Mapping"
			for examples of supported wildcards. Double click the "Name Pattern" cell to edit the pattern.
        	</option>
        	<option name="Name Pattern">The name pattern of the columns.</option>
        	<option name="RegEx">Check this option if the search pattern is a regular expression, otherwise it is treated as string with wildcards ('*' and '?').</option>
        	<option name="Key Name">The name of the key.</option>
        	<option name="Primary Key">If checked, the key is a primary key. Otherwise, it is a unique key </option>
        </tab>                      
    </fullDescription>
    
    <ports>
        <inPort index="0" name="Database Connection">A database connection to connect to the database.</inPort>
        <inPort index="1" name="Datatable">A data table whose data table spec should be used to create the new database table.</inPort>
        <outPort index="0" name="Schema and Table Name">The schema and table name of the new created database table</outPort>
        <!-- possibly more output ports here-->
    </ports>        
</knimeNode>
