/* 
 * -------------------------------------------------------------------
 * This source code, its documentation and all appendant files
 * are protected by copyright law. All rights reserved.
 *
 * Copyright, 2003 - 2008
 * University of Konstanz, Germany
 * Chair for Bioinformatics and Information Mining (Prof. M. Berthold)
 * and KNIME GmbH, Konstanz, Germany
 *
 * You may not modify, publish, transmit, transfer or sell, reproduce,
 * create derivative works from, distribute, perform, display, or in
 * any way exploit any of the content, in whole or in part, except as
 * otherwise expressly permitted in writing by the copyright owner or
 * as specified in the license file distributed with this product.
 *
 * If you have any questions please contact the copyright holder:
 * website: www.knime.org
 * email: contact@knime.org
 * -------------------------------------------------------------------
 * 
 */
package org.knime.base.data.replace;

import org.knime.core.data.DataCell;
import org.knime.core.data.DataRow;
import org.knime.core.data.DataType;
import org.knime.core.data.RowIterator;

/**
 * 
 * @author Bernd Wiswedel, University of Konstanz
 */
public class ReplacedColumnsRowIterator extends RowIterator {
    private final RowIterator m_it;

    private final ReplacedCellsFactory m_cellFactory;

    private final DataType[] m_validateTypes;

    private final int[] m_columns;

    /**
     * Creates a new replaced column iterator.
     * 
     * @param it the iterator in which one or more columns are replaced
     * @param fac the factory for the replacement cells
     * @param validateTypes the new data types
     * @param columns the column indices to replace
     */
    ReplacedColumnsRowIterator(final RowIterator it,
            final ReplacedCellsFactory fac, final DataType[] validateTypes,
            final int[] columns) {
        m_it = it;
        m_cellFactory = fac;
        m_validateTypes = validateTypes;
        m_columns = columns;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasNext() {
        return m_it.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataRow next() {
        DataRow origNext = m_it.next();
        DataCell[] newCells = m_cellFactory.getReplacement(origNext, m_columns);
        for (int i = 0; i < m_columns.length; i++) {
            if (!m_validateTypes[i].isASuperTypeOf(newCells[i].getType())) {
                // !m_validateClass.isAssignableFrom(newCell.getClass())) {
                // TODO: Check if correct
                throw new IllegalStateException(
                        "Cell generated by factory ( \"" + newCells[i]
                                + "\") is not subclass of column class: "
                                + m_validateTypes[i].getClass().getName()
                                + " vs. " + newCells[i].getClass());
            }
        }
        return new ReplacedColumnsDataRow(origNext, newCells, m_columns);
    }
}
